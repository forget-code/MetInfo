<?php# MetInfo Enterprise Content Management System# Copyright (C) MetInfo Co.,Ltd (http://www.metinfo.cn). All rights reserved.defined('IN_MET') or exit('No permission');load::sys_class('admin');load::sys_func('file');load::sys_func('array');//支付接口参数方法require_once PATH_WEB.'app/system/pay/admin/function/payment.func.php';class admin_pay extends admin {    public function __construct() {        global $_M;        parent::__construct();        nav::set_nav(1, '综合管理', $_M['url']['own_form'] . '&a=dopaylist');        nav::set_nav(2, '微信', $_M['url']['own_form'] . '&a=dowxpay');        nav::set_nav(3, '财付通', $_M['url']['own_form'] . '&a=dotenpay');        nav::set_nav(4, '支付宝', $_M['url']['own_form'] . '&a=doalipay');        nav::set_nav(5, '银联', $_M['url']['own_form'] . '&a=dounionpay');        nav::set_nav(6, 'PayPal', $_M['url']['own_form'] . '&a=dopaypal');        #nav::set_nav(7, '网银在线', $_M['url']['own_form'] . '&a=dojdpay');    }    public function dopaylist() {        global $_M;        nav::select_nav(1);        $payment_open = $this->GetPaymentConfig('payment_open');        $payment_type = $this->GetPaymentConfig('payment_type');        require $this->template('own/paylist');    }    public function dosavepaymentconfig() {        global $_M;        nav::select_nav(1);        $this->SetPaymentConfig('payment_open', $_M['form']['payment_open']);        $this->SetPaymentConfig('payment_type', $_M['form']['payment_type']);        $message = "操作成功";        turnover("{$_M['url']['own_form']}a=dopaylist", "{$message}");    }    public function dowxpay() {        global $_M;        nav::select_nav(2);        $paytype = "1";        $app_id = $this->GetAPI($paytype, 'app_id');        $app_mchid = $this->GetAPI($paytype, 'app_mchid');        $app_key = $this->GetAPI($paytype, 'app_key');        $app_secert = $this->GetAPI($paytype, 'app_secert');        $apiclient_cert = $this->GetAPI($paytype, 'apiclient_cert');        $apiclient_key = $this->GetAPI($paytype, 'apiclient_key');        $proxy_host = $this->GetAPI($paytype, 'proxy_host');        $proxy_port = $this->GetAPI($paytype, 'proxy_port');        $report_lev = $this->GetAPI($paytype, 'report_lev');        $message = "操作成功";        require $this->template('own/wxpay');    }    public function dosavewxpay() {        global $_M;        $wxpay_config['app_id'] = $_M['form']['app_id'];        $wxpay_config['app_mchid'] = $_M['form']['app_mchid'];        $wxpay_config['app_key'] = $_M['form']['app_key'];        $wxpay_config['app_secert'] = $_M['form']['app_secert'];        $wxpay_config['apiclient_cert'] = $_M['form']['apiclient_cert'];        $wxpay_config['apiclient_key'] = $_M['form']['apiclient_key'];        $wxpay_config['proxy_host'] = $_M['form']['proxy_host'];        $wxpay_config['proxy_port'] = $_M['form']['proxy_port'];        $wxpay_config['report_lev'] = $_M['form']['report_lev'];        $this->SetAPI($_M['form']['type'], 'app_id', $wxpay_config['app_id']);        $this->SetAPI($_M['form']['type'], 'app_mchid', $wxpay_config['app_mchid']);        $this->SetAPI($_M['form']['type'], 'app_key', $wxpay_config['app_key']);        $this->SetAPI($_M['form']['type'], 'app_secert', $wxpay_config['app_secert']);        $this->SetAPI($_M['form']['type'], 'apiclient_cert', $wxpay_config['apiclient_cert']);        $this->SetAPI($_M['form']['type'], 'apiclient_key', $wxpay_config['apiclient_key']);        $this->SetAPI($_M['form']['type'], 'proxy_host', $wxpay_config['proxy_host']);        $this->SetAPI($_M['form']['type'], 'proxy_port', $wxpay_config['proxy_port']);        $this->SetAPI($_M['form']['type'], 'report_lev', $wxpay_config['report_lev']);        $this->CreatWxPayConfig($wxpay_config);        $paytype = $_M['form']['type'];        $message = "操作成功";        turnover("{$_M['url']['own_form']}a=dowxpay", "{$message}");    }    /*     * 支付接口——财付通     */    public function dotenpay() {        global $_M;        nav::select_nav(3);        $paytype = "2";        $tem_partner = $this->GetAPI($paytype, 'tem_partner');        $tem_key = $this->GetAPI($paytype, 'tem_key');        require $this->template('own/tenpay');    }    public function dosavetempay() {        global $_M;        $this->SetAPI($_M['form']['type'], 'tem_partner', $_M['form']['tem_partner']);        $this->SetAPI($_M['form']['type'], 'tem_key', $_M['form']['tem_key']);        $paytype = $_M['form']['type'];        $message = "操作成功";        turnover("{$_M['url']['own_form']}a=dotenpay", "{$message}");    }    /*     * 支付接口——支付宝     */    public function doalipay() {        global $_M;        nav::select_nav(4);        $paytype = "3";        $app_partner = $this->GetAPI($paytype, 'app_partner');        $app_seller_email = $this->GetAPI($paytype, 'app_seller_email');        $app_key = $this->GetAPI($paytype, 'app_key');        $app_cacert = $this->GetAPI($paytype, 'app_cacert');        require $this->template('own/alipay');    }    public function dosavealipay() {        global $_M;        $this->SetAPI($_M['form']['type'], 'app_partner', $_M['form']['app_partner']);        $this->SetAPI($_M['form']['type'], 'app_seller_email', $_M['form']['app_seller_email']);        $this->SetAPI($_M['form']['type'], 'app_key', $_M['form']['app_key']);        $this->SetAPI($_M['form']['type'], 'app_cacert', $_M['form']['app_cacert']);        $paytype = $_M['form']['type'];        $message = "操作成功";        turnover("{$_M['url']['own_form']}a=doalipay", "{$message}");    }    /**     * 【微信】重写配置文件     */    protected function CreatWxPayConfig($wxpay_config) {        $file = PATH_WEB . $this->ChangeStrType('app/system/pay/web/wxpay/WxPay.Config.php');        makefile($file);        $myfile = fopen($file, "w") or die("Unable to open file!");        $code = "<?php\n";        fwrite($myfile, $code);        $code = "class WxPayConfig {\n";        fwrite($myfile, $code);        $code = "const APPID = '{$wxpay_config['app_id']}';\n";        fwrite($myfile, $code);        $code = "const MCHID = '{$wxpay_config['app_mchid']}';\n";        fwrite($myfile, $code);        $code = "const KEY = '{$wxpay_config['app_key']}';\n";        fwrite($myfile, $code);        $code = "const APPSECRET = '{$wxpay_config['app_secert']}';\n";        fwrite($myfile, $code);        $code = "const SSLCERT_PATH = '';\n";        fwrite($myfile, $code);        $code = "const SSLKEY_PATH = '';\n";        fwrite($myfile, $code);        $code = "const CURL_PROXY_HOST = '{$wxpay_config['proxy_host']}';\n";        fwrite($myfile, $code);        $code = "const CURL_PROXY_PORT = '{$wxpay_config['proxy_port']}';\n";        fwrite($myfile, $code);        $code = "const REPORT_LEVENL = '{$wxpay_config['report_lev']}';\n";        fwrite($myfile, $code);        $code = "}";        fwrite($myfile, $code);        fclose($myfile);    }    /*     * 支付接口——银联     */    public function dounionpay() {        global $_M;        nav::select_nav(5);        $paytype = "4";        $merid = $this->GetAPI($paytype, 'merid');        $sign_cert_path = $this->GetAPI($paytype, 'sign_cert_path');        $sign_cert_pwd = $this->GetAPI($paytype, 'sign_cert_pwd');        $encrypt_cert_path = $this->GetAPI($paytype, 'encrypt_cert_path');        $log_level = $this->GetAPI($paytype, 'log_level');        require $this->template('own/unionpay');    }    public function dosaveunionpay() {        global $_M;        $unionpay_config['merid'] = $_M['form']['merid'];        $unionpay_config['sign_cert_path'] = $_M['form']['sign_cert_path'];        $unionpay_config['sign_cert_pwd'] = $_M['form']['sign_cert_pwd'];        $unionpay_config['encrypt_cert_path'] = $_M['form']['encrypt_cert_path'];        $unionpay_config['log_level'] = $_M['form']['log_level'];        $this->SetAPI($_M['form']['type'], 'merid', $unionpay_config['merid']);        $this->SetAPI($_M['form']['type'], 'sign_cert_path', $unionpay_config['sign_cert_path']);        $this->SetAPI($_M['form']['type'], 'sign_cert_pwd', $unionpay_config['sign_cert_pwd']);        $this->SetAPI($_M['form']['type'], 'encrypt_cert_path', $unionpay_config['encrypt_cert_path']);        $this->SetAPI($_M['form']['type'], 'log_level', $unionpay_config['log_level']);        $this->CreatUnionPayConfig($unionpay_config);        $paytype = $_M['form']['type'];        $message = "操作成功";        turnover("{$_M['url']['own_form']}a=dounionpay", "{$message}");    }    /**     * 【银联】重写配置文件     */    protected function CreatUnionPayConfig($unionpay_config) {        global $_M;        $log_level = $unionpay_config['log_level'] ? 'PhpLog::DEBUG' : 'PhpLog::OFF';        $file = PATH_WEB . $this->ChangeStrType('app/system/web/pay/unionpay/SDKConfig.php');        makefile($file);        $myfile = fopen($file, "w") or die("Unable to open file!");        $code = "<?php\n";        fwrite($myfile, $code);        $code = "const MERID_CONFIG = '{$unionpay_config['merid']}';\n";        fwrite($myfile, $code);        $code = "const SDK_SIGN_CERT_PWD = '{$unionpay_config['sign_cert_pwd']}';\n";        fwrite($myfile, $code);        $code = "const SDK_LOG_LEVEL = {$log_level};\n";        fwrite($myfile, $code);        $code = "const SDK_SIGN_CERT_PATH = '" . str_replace("\\", "/", PATH_WEB) . str_replace("\\", "/", substr($unionpay_config['sign_cert_path'], 3)) . "';\n";        fwrite($myfile, $code);        $code = "const SDK_ENCRYPT_CERT_PATH = '" . str_replace("\\", "/", PATH_WEB) . str_replace("\\", "/", substr($unionpay_config['encrypt_cert_path'], 3)) . "';\n";        fwrite($myfile, $code);        $code = "const SDK_VERIFY_CERT_DIR = '" . str_replace("\\", "/", PATH_WEB) . "upload/file/';\n";        fwrite($myfile, $code);        $code = "const SDK_FILE_DOWN_PATH = '" . str_replace("\\", "/", PATH_WEB) . "app/system/web/pay/unionpay/file/';\n";        fwrite($myfile, $code);        $code = "const SDK_LOG_FILE_PATH = '" . str_replace("\\", "/", PATH_WEB) . "app/system/web/pay/unionpay/logs/';\n";        fwrite($myfile, $code);        $code = "const SDK_FRONT_NOTIFY_URL = '" . $_M['url']['site'] . "pay/return.php';\n";        fwrite($myfile, $code);        $code = "const SDK_BACK_NOTIFY_URL = '" . $_M['url']['site'] . "pay/notify.php';\n";        fwrite($myfile, $code);        $code = "const SDK_FRONT_TRANS_URL = 'https://gateway.95516.com/gateway/api/frontTransReq.do';\nconst SDK_BACK_TRANS_URL = 'https://gateway.95516.com/gateway/api/backTransReq.do';\nconst SDK_BATCH_TRANS_URL = 'https://gateway.95516.com/gateway/api/batchTrans.do';\nconst SDK_SINGLE_QUERY_URL = 'https://gateway.95516.com/gateway/api/queryTrans.do';\nconst SDK_FILE_QUERY_URL = 'https://gateway.95516.com:9080/';\nconst SDK_Card_Request_Url = 'https://gateway.95516.com/gateway/api/cardTransReq.do';\nconst SDK_App_Request_Url = 'https://gateway.95516.com/gateway/api/appTransReq.do';\nconst JF_SDK_FRONT_TRANS_URL = 'https://gateway.95516.com/jiaofei/api/frontTransReq.do';\nconst JF_SDK_BACK_TRANS_URL = 'https://gateway.95516.com/jiaofei/api/backTransReq.do';\nconst JF_SDK_SINGLE_QUERY_URL = 'https://gateway.95516.com/jiaofei/api/queryTrans.do';\nconst JF_SDK_CARD_TRANS_URL = 'https://gateway.95516.com/jiaofei/api/cardTransReq.do';\nconst JF_SDK_APP_TRANS_URL = 'https://gateway.95516.com/jiaofei/api/appTransReq.do';\n";        fwrite($myfile, $code);        $code = "?>";        fwrite($myfile, $code);        fclose($myfile);    }     /*     * 支付接口——PayPal     */    public function dopaypal() {        global $_M;        nav::select_nav(6);        $query = pay_config_query('paypal_config', $_M['form']['lang']);        //查询接口参数        $paypal_config  = jsondecode($query['value']);        require $this->template('own/paypal');    }    public function dosavepaypal() {        global $_M;        $paypal_config = array(            'open'              =>$_M['form']['open'],            'user'              =>$_M['form']['user'],            'password'          =>$_M['form']['password'],            'signature'         =>$_M['form']['signature'],            'user_sandbox'      =>$_M['form']['user_sandbox'],            'password_sandbox'  =>$_M['form']['password_sandbox'],            'signature_sandbox' =>$_M['form']['signature_sandbox'],            'paytype'           =>'5'        );        $query = pay_config_query('paypal_config', $_M['form']['lang']);        //查询接口参数        if($query)        {            pay_config_modify('paypal_config', jsonencode($paypal_config));     //修改接口参数        }        if(!$query)        {            pay_config_save('paypal_config', jsonencode($paypal_config));       //存储接口参数JSON格式数据        }        turnover("{$_M['url']['own_form']}a=dopaypal", "{$_M['word']['success']}");    }    /**     * 网银在线——京东     */    public function dojdpay() {        global $_M;        nav::select_nav(7);        $query = pay_config_query('jdpay_config', $_M['form']['lang']);         //查询接口参数        $jdpay_config  = jsondecode($query['value']);        require $this->template('own/jdpay');    }    public function dosavejdpay() {        global $_M;        $jdpay_config = array(            'jd_mid'            =>$_M['form']['jd_mid'],                        //商户编号            'jd_key'            =>$_M['form']['jd_key'],                        //商户密钥            'jd_payment_type'   =>$_M['form']['jd_payment_type'],               //收款支付类型            //储蓄卡授权代码            'banklist_cash'     =>"1025|1051|104|103|3407|3230|3080|313|314|309|305|312|307|311|310|3061|326|335|342|343|316|302|324|336|3341|344|317|401|402|403|404",            //信用卡授权代码            'banklist_credit'   =>"1027|1054|106|1031|3011|3231|308|3131|3141|3091|3051|3121|3071|3112|306|3261|303|3241|334|3101|4031",            'paytype'           =>'7'        );        $query = pay_config_query('jdpay_config', $_M['form']['lang']);         //查询接口参数        if($query)        {            pay_config_modify('jdpay_config', jsonencode($jdpay_config));       //修改接口参数        }        if(!$query)        {            pay_config_save('jdpay_config', jsonencode($jdpay_config));         //存储接口参数JSON格式数据        }        turnover("{$_M['url']['own_form']}a=dojdpay", "{$_M['word']['success']}");    }    /**     * 支付接口参数设定     */    public function SetAPI($type, $name, $value) {        global $_M;        $table = $_M['config']['tablepre'] . 'pay_api';        $query = "SELECT id FROM {$table} WHERE name='{$name}'AND paytype='{$type}';";        $array = DB::get_one($query);        if (!$array && $type && $name && $value != '') {            $query = "INSERT INTO {$table} SET name='{$name}',paytype='{$type}',value='{$value}';";            DB::query($query);            $result = "Save Success!";        } else if ($array && $type && $name && $value != '') {            $query = "UPDATE {$table} SET value='{$value}' WHERE  name='{$name}'AND paytype='{$type}';";            DB::query($query);            $result = "Update Success!";        } else {            $result = "Fail!";        }        return $result;    }    /**     * 支付接口参数获取     */    protected function GetAPI($type, $name) {        global $_M;        if ($type && $name) {            $table = $_M['config']['tablepre'] . 'pay_api';            $query = "SELECT value FROM {$table} WHERE name='{$name}'AND paytype='{$type}';";            $arr = DB::get_one($query);            $value = $arr['value'];        } else {            $value = 'Fail!';        }        return $value;    }    /**     * 支付插件参数配置     */    protected function SetPaymentConfig($name, $value) {        global $_M;        $table = $_M['config']['tablepre'] . 'pay_config';        $query = "SELECT id FROM {$table} WHERE name='{$name}' and lang='{$_M['lang']}';";        $array = DB::get_one($query);        if (!$array && $name && $value != '') {            $query = "INSERT INTO {$table} SET name='{$name}',value='{$value}',mobile_value='0',columnid='0',flashid='0',lang='{$_M['lang']}'";            DB::query($query);            $result = "Save Success!";        } else if ($array && $name && $value != '') {            $query = "UPDATE {$table} SET value='{$value}' WHERE  name='{$name}' and lang='{$_M['lang']}'";            DB::query($query);            $result = "Update Success!";        } else {            $result = "Fail!";        }        return $result;    }    /**     * 支付插件参数获取     */    protected function GetPaymentConfig($name) {        global $_M;        if ($name != '') {            $table = $_M['config']['tablepre'] . 'pay_config';            $query = "SELECT value FROM {$table} WHERE name='{$name}' and lang='{$_M['lang']}'";            $arr = DB::get_one($query);            $value = $arr['value'];        } else {            $value = 'Fail!';        }        return $value;    }    /*     *功能   根据服务器系统类型判断更改字符串编码类型     */    public function ChangeStrType($str) {            global $_M;            $system = php_uname('s');            if(is_strinclude($system,'win')) {                    $str = str_replace('/', '\\', $str);                    $str = iconv("UTF-8", "GBK", $str);	//WINDOWS系统下 文件名转码，解决中文名UTF-8编码无法删除的问题            }            return $str;    }}# This program is an open source system, commercial use, please consciously to purchase commercial license.# Copyright (C) MetInfo Co., Ltd. (http://www.metinfo.cn). All rights reserved.?>